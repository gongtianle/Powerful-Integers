class Solution {
public:
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {
       pos=0;
        return traverse(root,voyage)?flip:vector<int>()={-1};
    }
private:
    int pos;
    vector<int>flip;
    bool traverse(TreeNode*root,vector<int>&voyage){
        if(root==nullptr) return true;
        if(root->val!=voyage[pos++]) return false;
        auto l=root->left;auto r=root->right;
        if(l!=nullptr&&l->val!=voyage[pos])
        {
            flip.push_back(root->val);
            swap(l,r) ;
        }
        return traverse(l,voyage)&&traverse(r,voyage);
    }
};
//本题的关键点在于二叉树的递归遍历这一点，并且注意算法题目中的要求比如这一题中，
//each node has a different value from {1,2,3,4,5...N}
//并且交换的节点必然是一个父节点下的两节点进行两两交换
//从父节点开始一点交换后与序列不相等则，不成立。
