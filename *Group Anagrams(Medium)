Method 1
class Solution {
public:
   vector<vector<string>> groupAnagrams(vector<string>& strs) {
	vector<vector<string>> str;
	int i = 0;
	for (; i < strs.size(); i++) {
		vector<string> res;
		res.push_back(strs[i]);
		for (int j = i + 1; j < strs.size(); j++) {
			if (compare(strs[i], strs[j]))
			{
				res.push_back(strs[j]);
				strs.erase(strs.begin() + j);
                j--;
			}
		}
		strs.erase(strs.begin() + i);
		str.push_back(res);
		i = -1;
	}
	return str;
}	
    private:
  bool compare(string x, string y) {
	if (x.size() != y.size())
		return false;

	for (int i = 0; i < x.size(); i++) {
		int index = 0;
		for (int j = 0; j < y.size(); j++) {
			if (x[i] == y[j])
			{
				x.erase(x.begin() + i);
				y.erase(y.begin() + j);
				index = 1;
				i = -1;
				break;
			}
		}
		if (index==0)
		{
			return false;
		}
	}
	return true;
}
};
//自己写的方法，效率很低，很傻，改进的地方很多
//Method 2
  vector<vector<string>> groupAnagrams(vector<string>& strs) {
       unordered_map<string, vector<string> > group;
        for (const auto &s : strs) 
        {
            string key = s;
            sort(key.begin(), key.end());
            group[key].push_back(s);
        }
        vector<vector<string>> anagrams;
        for (const auto m : group) 
        { 
            vector<string> anagram(m.second.begin(), m.second.end());
            anagrams.push_back(anagram);
        }
        return anagrams;
   }
   //这个代码就写的十分优美，很好，只不过是被人写的。学习的还有很多，第一次知道sort和可以排字母的顺序，还有unordered_map还可以有vector作为成员。
