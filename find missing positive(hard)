//Method 1
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        unordered_map<int,int> map;
        for(int i=0;i<nums.size();i++){
            map[nums[i]]++;
        }
        int i=1;
        while(map.count(i)>0){
          i++;
        }
        return i;
    }
};
static int x = []() {std::ios::sync_with_stdio(false); cin.tie(0); return 0; }();
//占用内存较大，要使用哈希表；
//method2
 int firstMissingPositive(vector<int>& nums) {
      sort(begin(nums),end(nums));
      int j=1;
      for(int i=0;i<nums.size();i++){
          if(nums[i]<0)
              continue;
          if(nums[i]==j)
              j++;
              continue;
          if(nums[i]!=j)
              break;   
      }
      return j;
    }
};
//最佳答案中有个小于0ms的答案，不知道节约时间节约到哪里，寒假回去要主攻一下时间和空间效率的学习，知道怎样才能让算法的时间最小。
